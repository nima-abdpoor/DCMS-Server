// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: configs.sql

package db

import (
	"context"
)

const createConfig = `-- name: CreateConfig :one
INSERT INTO config (id,
                     uid,
                     sync_type,
                     is_live)
values ($1, $2, $3, $4) RETURNING id, uid, is_live, sync_type
`

type CreateConfigParams struct {
	ID       int64  `json:"id"`
	Uid      string `json:"uid"`
	SyncType string `json:"sync_type"`
	IsLive   bool   `json:"is_live"`
}

func (q *Queries) CreateConfig(ctx context.Context, arg CreateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, createConfig,
		arg.ID,
		arg.Uid,
		arg.SyncType,
		arg.IsLive,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.IsLive,
		&i.SyncType,
	)
	return i, err
}

const deleteConfig = `-- name: DeleteConfig :exec
DELETE
FROM config
WHERE uid = $1
`

func (q *Queries) DeleteConfig(ctx context.Context, uid string) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, uid)
	return err
}

const getConfig = `-- name: GetConfig :one
SELECT id, uid, is_live, sync_type
FROM config
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConfig(ctx context.Context, id int64) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig, id)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.IsLive,
		&i.SyncType,
	)
	return i, err
}

const listConfigs = `-- name: ListConfigs :many
SELECT id, uid, is_live, sync_type
FROM config
ORDER BY id LIMIT $1
OFFSET $2
`

type ListConfigsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListConfigs(ctx context.Context, arg ListConfigsParams) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, listConfigs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.IsLive,
			&i.SyncType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConfig = `-- name: UpdateConfig :one
UPDATE config
set is_live = $2 AND uid = $3 AND sync_type = $4
WHERE id = $1
    RETURNING id, uid, is_live, sync_type
`

type UpdateConfigParams struct {
	ID       int64  `json:"id"`
	IsLive   bool   `json:"is_live"`
	Uid      string `json:"uid"`
	SyncType string `json:"sync_type"`
}

func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, updateConfig,
		arg.ID,
		arg.IsLive,
		arg.Uid,
		arg.SyncType,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.IsLive,
		&i.SyncType,
	)
	return i, err
}

const updateConfigByUID = `-- name: UpdateConfigByUID :one
UPDATE config
set is_live = $2 AND sync_type = $3
WHERE uid = $1
    RETURNING id, uid, is_live, sync_type
`

type UpdateConfigByUIDParams struct {
	Uid      string `json:"uid"`
	IsLive   bool   `json:"is_live"`
	SyncType string `json:"sync_type"`
}

func (q *Queries) UpdateConfigByUID(ctx context.Context, arg UpdateConfigByUIDParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, updateConfigByUID, arg.Uid, arg.IsLive, arg.SyncType)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.IsLive,
		&i.SyncType,
	)
	return i, err
}
