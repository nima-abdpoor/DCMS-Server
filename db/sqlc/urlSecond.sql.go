// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: urlSecond.sql

package db

import (
	"context"
)

const createUrlSecond = `-- name: CreateUrlSecond :one
INSERT INTO urlSecond (unique_id,
                       url_hash,
                       regex,
                       start_index,
                       finish_index)
values ($1, $2, $3, $4, $5) RETURNING id, unique_id, url_hash, regex, start_index, finish_index
`

type CreateUrlSecondParams struct {
	UniqueID    int64  `json:"unique_id"`
	UrlHash     string `json:"url_hash"`
	Regex       string `json:"regex"`
	StartIndex  int32  `json:"start_index"`
	FinishIndex int32  `json:"finish_index"`
}

func (q *Queries) CreateUrlSecond(ctx context.Context, arg CreateUrlSecondParams) (Urlsecond, error) {
	row := q.db.QueryRowContext(ctx, createUrlSecond,
		arg.UniqueID,
		arg.UrlHash,
		arg.Regex,
		arg.StartIndex,
		arg.FinishIndex,
	)
	var i Urlsecond
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.UrlHash,
		&i.Regex,
		&i.StartIndex,
		&i.FinishIndex,
	)
	return i, err
}

const deleteUrlSecond = `-- name: DeleteUrlSecond :exec
DELETE
FROM urlSecond
WHERE id = $1
`

func (q *Queries) DeleteUrlSecond(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUrlSecond, id)
	return err
}

const getUrlSecond = `-- name: GetUrlSecond :one
SELECT id, unique_id, url_hash, regex, start_index, finish_index
FROM urlSecond
WHERE unique_id = $1 LIMIT 1
`

func (q *Queries) GetUrlSecond(ctx context.Context, uniqueID int64) (Urlsecond, error) {
	row := q.db.QueryRowContext(ctx, getUrlSecond, uniqueID)
	var i Urlsecond
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.UrlHash,
		&i.Regex,
		&i.StartIndex,
		&i.FinishIndex,
	)
	return i, err
}

const listUrlSeconds = `-- name: ListUrlSeconds :many
SELECT id, unique_id, url_hash, regex, start_index, finish_index
FROM urlSecond
ORDER BY unique_id LIMIT $1
OFFSET $2
`

type ListUrlSecondsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUrlSeconds(ctx context.Context, arg ListUrlSecondsParams) ([]Urlsecond, error) {
	rows, err := q.db.QueryContext(ctx, listUrlSeconds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Urlsecond
	for rows.Next() {
		var i Urlsecond
		if err := rows.Scan(
			&i.ID,
			&i.UniqueID,
			&i.UrlHash,
			&i.Regex,
			&i.StartIndex,
			&i.FinishIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrlSecond = `-- name: UpdateUrlSecond :one
UPDATE urlSecond
set url_hash     = $2,
    regex        = $3,
    start_index  = $4,
    finish_index = $5
WHERE unique_id = $1 RETURNING id, unique_id, url_hash, regex, start_index, finish_index
`

type UpdateUrlSecondParams struct {
	UniqueID    int64  `json:"unique_id"`
	UrlHash     string `json:"url_hash"`
	Regex       string `json:"regex"`
	StartIndex  int32  `json:"start_index"`
	FinishIndex int32  `json:"finish_index"`
}

func (q *Queries) UpdateUrlSecond(ctx context.Context, arg UpdateUrlSecondParams) (Urlsecond, error) {
	row := q.db.QueryRowContext(ctx, updateUrlSecond,
		arg.UniqueID,
		arg.UrlHash,
		arg.Regex,
		arg.StartIndex,
		arg.FinishIndex,
	)
	var i Urlsecond
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.UrlHash,
		&i.Regex,
		&i.StartIndex,
		&i.FinishIndex,
	)
	return i, err
}
