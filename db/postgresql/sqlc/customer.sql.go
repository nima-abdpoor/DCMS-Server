// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (username,
                      password,
                      info,
                      email,
                      package_name,
                      sdk_uuid,
                      secret_key)
values ($1, $2, $3, $4, $5, $6, $7) RETURNING id, username, password, info, email, package_name, sdk_uuid, secret_key
`

type CreateCustomerParams struct {
	Username    string `json:"username"`
	Password    string `json:"password"`
	Info        string `json:"info"`
	Email       string `json:"email"`
	PackageName string `json:"package_name"`
	SdkUuid     string `json:"sdk_uuid"`
	SecretKey   string `json:"secret_key"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Username,
		arg.Password,
		arg.Info,
		arg.Email,
		arg.PackageName,
		arg.SdkUuid,
		arg.SecretKey,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Info,
		&i.Email,
		&i.PackageName,
		&i.SdkUuid,
		&i.SecretKey,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE
FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, username, password, info, email, package_name, sdk_uuid, secret_key
FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Info,
		&i.Email,
		&i.PackageName,
		&i.SdkUuid,
		&i.SecretKey,
	)
	return i, err
}

const getCustomerByUsername = `-- name: GetCustomerByUsername :one
SELECT id, username, password, info, email, package_name, sdk_uuid, secret_key
FROM customer
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetCustomerByUsername(ctx context.Context, username string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByUsername, username)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Info,
		&i.Email,
		&i.PackageName,
		&i.SdkUuid,
		&i.SecretKey,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customer
set username     = $2,
    password     = $3,
    info         = $4,
    email        = $5,
    package_name = $6,
    sdk_uuid     = $7,
    secret_key   = $8
WHERE id = $1 RETURNING id, username, password, info, email, package_name, sdk_uuid, secret_key
`

type UpdateCustomerParams struct {
	ID          int64  `json:"id"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Info        string `json:"info"`
	Email       string `json:"email"`
	PackageName string `json:"package_name"`
	SdkUuid     string `json:"sdk_uuid"`
	SecretKey   string `json:"secret_key"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Info,
		arg.Email,
		arg.PackageName,
		arg.SdkUuid,
		arg.SecretKey,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Info,
		&i.Email,
		&i.PackageName,
		&i.SdkUuid,
		&i.SecretKey,
	)
	return i, err
}
